$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
);
$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1370px,
);
$gutters: (
  0: 0,
  1: 0.25,
  2: 0.5,
  3: 1,
  4: 1.5,
  5: 3
);
$grid-columns: 12;
$grid-gutter: 30px !default;

.container-fluid{
    --grid-gutter-x:#{$grid-gutter};
    --grid-gutter-y:0;
    width: 100%;
    margin-left: auto;
    margin-right: auto;
    padding-left:calc( var(--grid-gutter-x) * 0.5);
    padding-right:calc( var(--grid-gutter-x) * 0.5);
}
.container{
    @extend .container-fluid;
}
.row{
    display: flex;
    flex-wrap: wrap;
    margin-left:calc( var(--grid-gutter-x) * 0.5 * -1) ;
    margin-right:calc( var(--grid-gutter-x) * 0.5 * -1) ;
    margin-top: calc(var(--grid-gutter-y) * -1);
    > *{
        padding-left:calc( var(--grid-gutter-x) * 0.5);
        padding-right:calc( var(--grid-gutter-x) * 0.5);
        margin-top: var(--grid-gutter-y);
    }
}
.col {
    flex: 1 0;
}
@each $infix ,$demention in $grid-breakpoints{
    $max-width: map-get($container-max-widths, $infix );
    $break-point: if($infix == xs, "" ,-#{$infix});
    @if($demention == 0){
        @for $i from 1 through 12 {
            .col#{$break-point}-#{$i}{
                flex: 0 0 auto;
                width: calc(100% / $grid-columns) * $i;
            }
        }
        @for $i from 1 through 6 {
            .row-cols#{$break-point}-#{$i} > *{
                flex: 0 0 auto;
                width: calc(100% / $i);
            }
        }
        @for $i from 0 to 12 {
            .offset#{$break-point}-#{$i}{
                margin-left: calc(100% / $grid-columns) * $i
            }
        }
        @each $infix, $ratio in $gutters{
            .g#{$break-point}-#{$infix}{
                --grid-gutter-x:#{$grid-gutter * $ratio};
                --grid-gutter-y:#{$grid-gutter * $ratio};
            }
            .gx#{$break-point}-#{$infix}{
                --grid-gutter-x:#{$grid-gutter * $ratio};
                
            }
            .gy#{$break-point}-#{$infix}{
                --grid-gutter-y:#{$grid-gutter * $ratio};
                
            }
        }
    }
    @else{
        @media (min-width: $demention){
            .container {
                width: $max-width;
            }
            @for $i from 1 through 6 {
                .row-cols#{$break-point}-#{$i} > *{
                    flex: 0 0 auto;
                    width: calc(100% / $i);
                }
            }
            @for $i from 1 through 12 {
                .col#{$break-point}-#{$i}{ 
                    flex: 0 0 auto;
                    width: calc(100% / $grid-columns) * $i;
                }
            }
            @for $i from 0 to 12 {
                .offset#{$break-point}-#{$i}{
                    margin-left: calc(100% / $grid-columns) * $i
                }
            }
            @each $infix, $ratio in $gutters{
                .g#{$break-point}-#{$infix}{
                    --grid-gutter-x:#{$grid-gutter * $ratio};
                    --grid-gutter-y:#{$grid-gutter * $ratio};
                }
                .gx#{$break-point}-#{$infix}{
                    --grid-gutter-x:#{$grid-gutter * $ratio};
                    
                }
                .gy#{$break-point}-#{$infix}{
                    --grid-gutter-y:#{$grid-gutter * $ratio};
                    
                }
            }
           
        }
    }
}
.item{
    background-color: green;
}